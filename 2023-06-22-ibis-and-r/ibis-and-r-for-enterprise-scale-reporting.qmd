---
title: "Pass Data Between Python and R using Parquet & Arrow for Scalable Reporting"
author: "Fran√ßois Michonneau"
date: 2023-06-22
---

This Quarto file contains the code shown in the blog post "Pass Data Between
Python and R using Parquet & Arrow for Scalable Reporting" published on the Voltron Data website.

```{python}
import os
from ibis.interactive import *
from pyarrow import fs
import pyarrow.parquet as pq

con = ibis.snowflake.connect(
    user=os.environ.get("SNOWFLAKE_USER"),
    password=os.environ.get("SNOWFLAKE_PASSWORD"),
    account=os.environ.get("SNOWFLAKE_ACCOUNT"),
    database=os.environ.get("SNOWFLAKE_DATABASE"),
    warehouse=os.environ.get("SNOWFLAKE_WAREHOUSE")
)

(h21 := con.table("2021_5year_household")
```

```{python}
energy_data = (
    h21
    .filter((
        (_.DIVISION == 5) & (_.TYPEHUGQ == 1)
    ))
    .select(
        _.ST,
        _.PUMA,
        _.HINCP,
        s.startswith("ELE"),
        s.startswith("GAS"),
        _.ADJHSG,
        _.ADJINC
    )
)
```

```{python}
s3 = fs.S3FileSystem(
    region = "<your AWS region>",
    access_key = "<your AWS access key>",
    secret_key = "<your AWS secret key>",
    session_token = "<yout AWS sessin token>"
)

pq.write_to_dataset(
    energy_data.to_pyarrow_batches(),
    "<your bucket name>/<your folder to hold the result>",
    filesystem=s3
)

s3.get_file_info(fs.FileSelector('<your bucket name>/<you folder to hold the result>'))
```


```{r}
library(arrow)

energy_s3 <- s3_bucket(
  "<your bucket name>/<your folder to hold the result>",
  region = "<your AWS region>",
  access_key = Sys.getenv("AWS_ACCESS_KEY_ID"),
  secret_key = Sys.getenv("AWS_SECRET_ACCESS_KEY"),
  session_token = Sys.getenv("AWS_SESSION_TOKEN")
)

energy <- open_dataset(energy_s3)
```

```{r}
library(dplyr)

se_energy <- energy |>
  filter(!is.na(HINCP) & HINCP > 0) |> 
  mutate(
    adj_income = HINCP * ADJINC / 1e6,
    adj_electricity = ELEP * ADJHSG / 1e6,
    adj_gas = GASP * ADJHSG / 1e6,
    electricity_income_ratio = adj_electricity / (adj_income/12),
    gas_income_ratio = adj_gas / (adj_income/12),
    ST = as.character(ST)
  ) |>
  select(
    ST,
    PUMA,
    starts_with("adj_"),
    ends_with("_ratio"),
    ends_with("FP")
  )
```

```{r}
calc_ratio_energy <- function(.data, var, ratio = 0.3) {
  .data |>
    group_by(ST, PUMA) |>
    summarize(
      p_above_ratio = mean({{ var }} > ratio)
    ) |>
    collect()
}

electricity_ratio <- se_energy  |>
  filter(ELEFP == 3) |> 
  calc_ratio_energy(electricity_income_ratio)

gas_ratio <-  se_energy |>
  filter(GASFP == 4) |>
  calc_ratio_energy(gas_income_ratio)
```


```{r}
library(tigris)
library(ggplot2)
library(purrr)
library(patchwork)
options(tigris_use_cache = TRUE)

## Get the PUMAs data for the South-East Atlantic states
se_atl_states <- c("FL", "GA", "SC", "NC","VA","WV","DC","MD","DE")
se_atl_pumas <- map_dfr(
  se_atl_states, tigris::pumas, class = "sf", cb = TRUE, year = 2019
)

## Function to generate the chloropleth map of the energy costs 
plot_energy_ratio <- function(d) {
  se_atl_pumas  |>
    left_join(d, by = c("STATEFP10" = "ST", "PUMACE10" = "PUMA"))  |>
    ggplot(aes(fill = p_above_ratio)) +
    geom_sf(size = 0.2, color="white") +
    scale_fill_viridis_b(
      name = NULL,
      n.breaks = 7,
      labels = scales::label_percent()
    ) +
    theme_minimal() +
    theme(
      plot.background = element_rect(color = "#333333")
    )
}

plot_electricity <- plot_energy_ratio(electricity_ratio) +
  labs(
    title = "Proportion of households for which electricity costs\nrepresent more than 30% of their income"
  )
plot_gas <- plot_energy_ratio(gas_ratio) +
  labs(
    title = "Proportion of households for which gas costs\nrepresent more than 30% of their income"
  )
plot_electricity + plot_gas
```
